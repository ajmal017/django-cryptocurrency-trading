# Generated by Django 2.2.8 on 2019-12-19 20:33

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone
import django_countries.fields
import month.models
import phonenumber_field.modelfields
import simple_email_confirmation.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.TextField(max_length=200)),
                ('registration_reason', models.CharField(choices=[('BUY', 'I want to buy'), ('SELL', 'I want to sell')], max_length=4)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('phone_activated', models.BooleanField(default=False)),
                ('phone_confirmation_code_sent', models.BooleanField(default=False)),
                ('confirmation_email_sent', models.BooleanField(default=False)),
                ('feedback_score', models.FloatField(default=0.0)),
                ('billing_address', models.CharField(max_length=100)),
                ('registration_date', models.DateField(auto_now=True)),
                ('profile_photo', models.ImageField(null=True, upload_to='user_profiles')),
                ('blocked_users', models.ManyToManyField(related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('trusted_users', models.ManyToManyField(related_name='trusted_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(simple_email_confirmation.models.SimpleEmailConfirmationUserMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('EUR', 'Euro'), ('GBP', 'Great British Pound'), ('JPY', 'Japanese Yen'), ('ETH', 'Ethereum'), ('XRP', 'Ripple')], default='BTC', max_length=3)),
                ('description', models.TextField()),
                ('address', models.CharField(max_length=60)),
                ('name', models.CharField(max_length=200)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankingProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='BitcoinProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='EthereumProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='RippleProcessor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=200)),
                ('first_request', models.TextField()),
                ('status', models.CharField(choices=[('p', 'Pending'), ('s', 'Solved')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_type', models.CharField(choices=[('sell', 'Sell'), ('buy', 'Buy')], max_length=20)),
                ('creation_date', models.DateTimeField(default=datetime.datetime(2019, 12, 19, 20, 33, 24, 239440, tzinfo=utc))),
                ('crypto_currency', models.CharField(choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('XRP', 'Ripple')], default='BTC', max_length=3)),
                ('fiat_currency', models.CharField(choices=[('USD', 'US Dollars'), ('EUR', 'Euro'), ('GBP', 'Great British Pound'), ('JPY', 'Japanese Yen')], default='BTC', max_length=3)),
                ('trade_amount', models.FloatField()),
                ('city', models.CharField(max_length=200)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('postcode', models.CharField(max_length=30)),
                ('hide_postcode', models.BooleanField(default=False)),
                ('price', models.FloatField()),
                ('minimum_transaction_limit', models.IntegerField()),
                ('maximum_transaction_limit', models.IntegerField()),
                ('trail_market_price', models.BooleanField(default=False)),
                ('preferred_payment_method', models.CharField(choices=[('cash_deposit', 'Cash Deposit'), ('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal'), ('pingit', 'Pingit'), ('cash_in_person', 'Cash (In Person)'), ('amazon_gc', 'Amazon Gift Card'), ('itunes_gc', 'iTunes Gift Card'), ('steam_gc', 'Steam Wallet Gift Card'), ('other', 'Other')], default='bank_transfer', max_length=20)),
                ('restrict_hours', models.BooleanField(default=False)),
                ('opening_time', models.TimeField(blank=True, null=True)),
                ('closing_time', models.TimeField(blank=True, null=True)),
                ('trade_terms', models.TextField()),
                ('track_liquidity', models.BooleanField(default=False)),
                ('identified_people_only', models.BooleanField(default=False)),
                ('sms_verification_required', models.BooleanField(default=False)),
                ('check_successful_trades', models.BooleanField(default=False)),
                ('minimum_successful_trades', models.IntegerField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='buyer', to=settings.AUTH_USER_MODEL)),
                ('buyer_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='buyer_account', to='wallet.Account')),
                ('buyer_pp', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='buyer_pp', to='wallet.PaymentProcessor')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seller', to=settings.AUTH_USER_MODEL)),
                ('seller_account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='seller_account', to='wallet.Account')),
                ('seller_pp', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='seller_pp', to='wallet.PaymentProcessor')),
                ('trade', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='wallet.Trade')),
            ],
        ),
        migrations.CreateModel(
            name='ProofTransactionSlip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date_of_transaction', models.DateField()),
                ('reference_num', models.CharField(max_length=40)),
                ('total_amount_paid', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CreditCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('XRP', 'Ripple')], max_length=3)),
                ('cc_currency', models.CharField(choices=[('USD', 'US Dollars'), ('EUR', 'Euro'), ('GBP', 'Great British Pound'), ('JPY', 'Japanese Yen')], max_length=3)),
                ('last_digits', models.CharField(max_length=4, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(4), django.core.validators.RegexValidator('\\d\\d\\d\\d')])),
                ('expiration_date', month.models.MonthField()),
                ('name_on_card', models.CharField(max_length=60)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('EUR', 'Euro'), ('GBP', 'Great British Pound'), ('JPY', 'Japanese Yen'), ('ETH', 'Ethereum'), ('XRP', 'Ripple')], default='USD', max_length=3)),
                ('amount', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserLanguages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[('English', 'English'), ('Spanish', 'Spanish'), ('Chinese', 'Chinese'), ('Japanese', 'Japanese'), ('Arabic', 'Arabic'), ('Portuguese', 'Portuguese'), ('Russian', 'Russian'), ('German', 'German'), ('Hindi', 'Hindi'), ('Urdu', 'Urdu')], max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'language')},
            },
        ),
    ]
